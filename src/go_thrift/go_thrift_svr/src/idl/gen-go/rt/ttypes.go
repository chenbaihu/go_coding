// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package rt

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type OrderType int64

const (
	OrderType_COMMONORDER OrderType = 0
	OrderType_SHAREDORDER OrderType = 1
)

func (p OrderType) String() string {
	switch p {
	case OrderType_COMMONORDER:
		return "OrderType_COMMONORDER"
	case OrderType_SHAREDORDER:
		return "OrderType_SHAREDORDER"
	}
	return "<UNSET>"
}

func OrderTypeFromString(s string) (OrderType, error) {
	switch s {
	case "OrderType_COMMONORDER":
		return OrderType_COMMONORDER, nil
	case "OrderType_SHAREDORDER":
		return OrderType_SHAREDORDER, nil
	}
	return OrderType(0), fmt.Errorf("not a valid OrderType string")
}

func OrderTypePtr(v OrderType) *OrderType { return &v }

type ServiceException struct {
	ErrorMsg string `thrift:"errorMsg,1,required" json:"errorMsg"`
}

func NewServiceException() *ServiceException {
	return &ServiceException{}
}

func (p *ServiceException) GetErrorMsg() string {
	return p.ErrorMsg
}
func (p *ServiceException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ServiceException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ErrorMsg = v
	}
	return nil
}

func (p *ServiceException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ServiceException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ServiceException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("errorMsg", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:errorMsg: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ErrorMsg)); err != nil {
		return fmt.Errorf("%T.errorMsg (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:errorMsg: %s", p, err)
	}
	return err
}

func (p *ServiceException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServiceException(%+v)", *p)
}

func (p *ServiceException) Error() string {
	return p.String()
}

type ComputeReq struct {
	TypeA1     int8    `thrift:"type,1,required" json:"type"`
	JobId      int64   `thrift:"jobId,2,required" json:"jobId"`
	CityId     int32   `thrift:"cityId,3,required" json:"cityId"`
	MapsplitId int32   `thrift:"mapsplitId,4,required" json:"mapsplitId"`
	OidList    []int64 `thrift:"oidList,5,required" json:"oidList"`
	DidList    []int64 `thrift:"didList,6,required" json:"didList"`
}

func NewComputeReq() *ComputeReq {
	return &ComputeReq{}
}

func (p *ComputeReq) GetTypeA1() int8 {
	return p.TypeA1
}

func (p *ComputeReq) GetJobId() int64 {
	return p.JobId
}

func (p *ComputeReq) GetCityId() int32 {
	return p.CityId
}

func (p *ComputeReq) GetMapsplitId() int32 {
	return p.MapsplitId
}

func (p *ComputeReq) GetOidList() []int64 {
	return p.OidList
}

func (p *ComputeReq) GetDidList() []int64 {
	return p.DidList
}
func (p *ComputeReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ComputeReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := int8(v)
		p.TypeA1 = temp
	}
	return nil
}

func (p *ComputeReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.JobId = v
	}
	return nil
}

func (p *ComputeReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.CityId = v
	}
	return nil
}

func (p *ComputeReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.MapsplitId = v
	}
	return nil
}

func (p *ComputeReq) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int64, 0, size)
	p.OidList = tSlice
	for i := 0; i < size; i++ {
		var _elem0 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem0 = v
		}
		p.OidList = append(p.OidList, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ComputeReq) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int64, 0, size)
	p.DidList = tSlice
	for i := 0; i < size; i++ {
		var _elem1 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem1 = v
		}
		p.DidList = append(p.DidList, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ComputeReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ComputeReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ComputeReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.BYTE, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:type: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:type: %s", p, err)
	}
	return err
}

func (p *ComputeReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("jobId", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:jobId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.JobId)); err != nil {
		return fmt.Errorf("%T.jobId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:jobId: %s", p, err)
	}
	return err
}

func (p *ComputeReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cityId", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:cityId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.CityId)); err != nil {
		return fmt.Errorf("%T.cityId (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:cityId: %s", p, err)
	}
	return err
}

func (p *ComputeReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mapsplitId", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:mapsplitId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MapsplitId)); err != nil {
		return fmt.Errorf("%T.mapsplitId (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:mapsplitId: %s", p, err)
	}
	return err
}

func (p *ComputeReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("oidList", thrift.LIST, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:oidList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.OidList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.OidList {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:oidList: %s", p, err)
	}
	return err
}

func (p *ComputeReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("didList", thrift.LIST, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:didList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.DidList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.DidList {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:didList: %s", p, err)
	}
	return err
}

func (p *ComputeReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ComputeReq(%+v)", *p)
}

type ComputeResp struct {
	Version    int8  `thrift:"version,1,required" json:"version"`
	TypeA1     int32 `thrift:"type,2,required" json:"type"`
	Status     int8  `thrift:"status,3,required" json:"status"`
	MapsplitId int32 `thrift:"mapsplitId,4,required" json:"mapsplitId"`
	// unused fields # 5 to 6
	Data string `thrift:"data,7,required" json:"data"`
}

func NewComputeResp() *ComputeResp {
	return &ComputeResp{}
}

func (p *ComputeResp) GetVersion() int8 {
	return p.Version
}

func (p *ComputeResp) GetTypeA1() int32 {
	return p.TypeA1
}

func (p *ComputeResp) GetStatus() int8 {
	return p.Status
}

func (p *ComputeResp) GetMapsplitId() int32 {
	return p.MapsplitId
}

func (p *ComputeResp) GetData() string {
	return p.Data
}
func (p *ComputeResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ComputeResp) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := int8(v)
		p.Version = temp
	}
	return nil
}

func (p *ComputeResp) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TypeA1 = v
	}
	return nil
}

func (p *ComputeResp) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := int8(v)
		p.Status = temp
	}
	return nil
}

func (p *ComputeResp) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.MapsplitId = v
	}
	return nil
}

func (p *ComputeResp) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.Data = v
	}
	return nil
}

func (p *ComputeResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ComputeResp"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ComputeResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version", thrift.BYTE, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:version: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.Version)); err != nil {
		return fmt.Errorf("%T.version (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:version: %s", p, err)
	}
	return err
}

func (p *ComputeResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:type: %s", p, err)
	}
	return err
}

func (p *ComputeResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.BYTE, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:status: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.Status)); err != nil {
		return fmt.Errorf("%T.status (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:status: %s", p, err)
	}
	return err
}

func (p *ComputeResp) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mapsplitId", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:mapsplitId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MapsplitId)); err != nil {
		return fmt.Errorf("%T.mapsplitId (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:mapsplitId: %s", p, err)
	}
	return err
}

func (p *ComputeResp) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("data", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:data: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Data)); err != nil {
		return fmt.Errorf("%T.data (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:data: %s", p, err)
	}
	return err
}

func (p *ComputeResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ComputeResp(%+v)", *p)
}
